services:
  db:
    container_name: wod_db
    image: mysql
    environment:
      - MYSQL_HOST=localhost
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - "3306:3306"
    volumes:
      - db:/var/lib/mysql
  nginx:
    build: 
      context: ./docker
      dockerfile: Dockerfile-nginx
    container_name: wod_nginx
    links:
      - php
    ports:
      - "666:80"
    volumes:
      - ./:/var/www/darkness:cached
  phpmyadmin:
    container_name: wod_phpmyadmin
    image: phpmyadmin/phpmyadmin
    links:
      - db
    ports:
      - '8081:80'
    environment:
      - PMA_HOST=db
      - MYSQL_ROOT_PASSWORD=root
      - UPLOAD_LIMIT=300M
  php:
    build: 
      context: ./docker
      dockerfile: Dockerfile-php
    container_name: wod_php
    environment:
      - COMPOSER_MEMORY_LIMIT=-1
      - PHP_UPLOAD_MAX_FILESIZE=100MB
      - PHP_MEMORY_LIMIT=500MB
    links:
      - db
    volumes:
      - ./:/var/www/darkness:cached

# ###> doctrine/doctrine-bundle ###
#   database:
#     image: postgres:${POSTGRES_VERSION:-16}-alpine
#     environment:
#       POSTGRES_DB: ${POSTGRES_DB:-app}
#       # You should definitely change the password in production
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
#       POSTGRES_USER: ${POSTGRES_USER:-app}
#     healthcheck:
#       test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
#       timeout: 5s
#       retries: 5
#       start_period: 60s
#     volumes:
#       - database_data:/var/lib/postgresql/data:rw
#       # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
#       # - ./docker/db/data:/var/lib/postgresql/data:rw
# ###< doctrine/doctrine-bundle ###
volumes:
  db:
# ###> doctrine/doctrine-bundle ###
#   database_data:
# ###< doctrine/doctrine-bundle ###
